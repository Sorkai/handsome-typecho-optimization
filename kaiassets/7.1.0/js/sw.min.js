var assetsToCache = [];

//添加缓存
self.addEventListener('install', function(event) {
    event.waitUntil(
        caches.open(CACHE_NAME).then(function(cache) {
            // console.log("install success");
            return cache.addAll(assetsToCache);

        }).then(function() {
            //todo
            return self.skipWaiting();
        })

    );
});

//可以进行版本修改，删除缓存
var version = "7.0.0";
var versionTag = "[VERSION_TAG]";

var CACHE_NAME = version+versionTag;
self.addEventListener('activate', function(event) {
    // console.log('activated!');
    var mainCache = [CACHE_NAME];
    event.waitUntil(
        caches.keys().then(function(cacheNames) {
            return Promise.all(
                cacheNames.map(function(cacheName) {
                    if ( mainCache.indexOf(cacheName) === -1) {//没有找到该版本号下面的缓存
                        // When it doesn't match any condition, delete it.
                        console.info('version changed, clean the cache, SW: deleting ' + cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
    return self.clients.claim();
});


//拦截请求使用缓存的内容
self.addEventListener('fetch', function(event) {
    // console.log('Handling fetch event for', event.request.url);

    // 劫持 HTTP Request
    event.respondWith(
        // 檢查快取中是否有可用的資源
        caches.match(event.request).then(function(response) {
            if (response) {
                // 使用 Service Worker 回應
                return response;
            } else {
                // console.log('No response found in cache. About to fetch from network...');
                return fetch(event.request)
                    .then(function(response) {
                        return caches.open(CACHE_NAME).then(function(cache) {
                            // 加入cache中)
                            if (event.request.url.indexOf("usr/themes/handsome/assets/") !== -1 || event.request.url.indexOf("vditor") !== -1 || event.request.url.indexOf("qqmusic.qq.com") !== -1 || event.request.url.indexOf(".mp3") !== -1){
                                // console.log("【yes】 put in the cache" + event.request.url);
                                cache.put(event.request, response.clone());
                            }else{
                                // console.log("【no】 put in the cache"+ event.request.url);
                            }
                            return response;
                        });
                    })
                    .catch(function(error) {
                        // console.error('Fetching request url ,' +event.request.url+' failed:', error);
                        // throw error;
                    });
            }


        })
    );
});
