"use strict";

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

(function () {
  var OwO = function () {
    function OwO(option) {
      var _this = this;

      _classCallCheck(this, OwO);

      var defaultOption = {
        logo: 'OwO表情',
        container: document.getElementsByClassName('OwO')[0],
        target: document.getElementsByTagName('textarea')[0],
        position: 'down',
        width: '100%',
        maxHeight: '235px',
        api: 'https://api.anotherhome.net/OwO/OwO.json'
      };

      for (var defaultKey in defaultOption) {
        if (defaultOption.hasOwnProperty(defaultKey) && !option.hasOwnProperty(defaultKey)) {
          option[defaultKey] = defaultOption[defaultKey];
        }
      }

      this.container = option.container;
      this.target = option.target;

      if (option.position === 'up') {
        this.container.classList.add('OwO-up');
      }

      var xhr = new XMLHttpRequest();

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
            _this.odata = JSON.parse(xhr.responseText);

            _this.init(option);
          } else {
            console.log('OwO data request was unsuccessful: ' + xhr.status);
          }
        }
      };

      xhr.open('get', option.api, true);
      xhr.send(null);
    }

    _createClass(OwO, [{
      key: 'init',
      value: function init(option) {
        var _this2 = this;

        this.area = option.target;
        this.packages = Object.keys(this.odata); // fill in HTML

        var html = '\n            <div class="OwO-logo padder-v-sm"><span class="smile-icons"><svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round" class="css-i6dzq1"><circle cx="12" cy="12" r="10"></circle><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line></svg></span><span class="OwOlogotext">' + option.logo + '</span></div>\n            <div class="OwO-body" style="width: ' + option.width + '"><div class="OwO-title"><span>OwO</span></div>';

        for (var i = 0; i < this.packages.length; i++) {
          html += '\n                <ul class="OwO-items OwO-' + this.odata[this.packages[i]].name + ' OwO-items-' + this.odata[this.packages[i]].type + '" style="max-height: ' + (parseInt(option.maxHeight) - 53 + 'px') + ';">';
          var opackage = this.odata[this.packages[i]].container;

          for (var _i = 0; _i < opackage.length; _i++) {
            if (this.odata[this.packages[i]].type === 'image') {
              html += '\n                    <li class="OwO-item" title="' + opackage[_i].text + '" data-input="' + this.odata[this.packages[i]].name + ":" + opackage[_i].icon + '">' + '<img noGallery noAlt data-original="' + LocalConst.BASE_SCRIPT_URL + 'assets/img/emotion/' + this.odata[this.packages[i]].name + '/' + opackage[_i].icon + '.png" src="" icon="' + opackage[_i].text + '"></li>';
            } else {
              html += '\n                    <li class="OwO-item" title="' + opackage[_i].text + '">' + opackage[_i].icon + '</li>';
            }
          }

          html += '\n                </ul>';
        }

        html += '\n                <div class="OwO-bar">\n                    <ul class="OwO-packages">';

        for (var _i2 = 0; _i2 < this.packages.length; _i2++) {
          html += '\n                        <li><span>' + this.packages[_i2] + '</span></li>';
        }

        html += '\n                    </ul>\n                </div>\n            </div>\n            ';
        this.container.innerHTML = html; // bind event

        this.logo = this.container.getElementsByClassName('OwO-logo')[0];
        this.logo.addEventListener('click', function () {
          _this2.toggle();
        });
        this.container.getElementsByClassName('OwO-body')[0].addEventListener('click', function (e) {
          var target = null;
          var type = 0;

          if (e.target.classList.contains('OwO-item')) {
            target = e.target; //console.log("文字表情");
          } else if (e.target.parentNode.classList.contains('OwO-item')) {
            target = e.target.parentNode; //target = e.target;
            //console.log("图片表情");
          }

          if (target) {
            var startPos = _this2.area.selectionStart;
            var endPos = _this2.area.selectionEnd;
            var areaValue = _this2.area.value;
            var insertContent;

            if (target.dataset.hasOwnProperty("input")) {
              insertContent = " ::" + target.dataset.input + ":: ";
            } else {
              insertContent = target.innerHTML;
            }

            _this2.area.value = areaValue.slice(0, startPos) + insertContent + areaValue.slice(endPos); //console.log("areaValue" + areaValue); 编辑器的内容
            //console.log("target" + insertContent); //插入的内容

            _this2.area.selectionStart = startPos + insertContent.length;
            _this2.area.selectionEnd = startPos + insertContent.length;

            _this2.area.focus(); //定位到光标位置


            _this2.toggle();
          }
        });
        this.packagesEle = this.container.getElementsByClassName('OwO-packages')[0];

        var _loop = function _loop(_i3) {
          (function (index) {
            _this2.packagesEle.children[_i3].addEventListener('click', function () {
              _this2.tab(index);
            });
          })(_i3);
        };

        for (var _i3 = 0; _i3 < this.packagesEle.children.length; _i3++) {
          _loop(_i3);
        }

        this.tab(0);
      }
    }, {
      key: 'toggle',
      value: function toggle() {
        // console.log("toggle");
        if (this.container.classList.contains('OwO-open')) {
          this.container.classList.remove('OwO-open');
        } else {
          this.container.classList.add('OwO-open');
        }

        var secret = document.getElementById("secret_comment");

        if (secret) {
          if (secret.offsetParent === null) {
            secret.style.display = "block";
          } else {
            secret.style.display = "none";
          }
        } //懒加载该区域类的图片


        try {
          $("img").lazyload({
            effect: "fadeIn"
          });
        } catch (e) {
          // console.log(this.container.classList);
          if (this.container.classList.contains("OwO-open")) {
            var a = this.container.querySelectorAll(".OwO-items.OwO-items-show>li img");
            [].forEach.call(a, function (a) {
              var b = a.dataset.original;
              b && (a.src = b, a.removeAttribute("data-src"));
            });
          }
        }
      }
    }, {
      key: 'tab',
      value: function tab(index) {
        // console.log("tab");
        //切换选项卡对于的ul区域显示
        var itemsShow = this.container.getElementsByClassName('OwO-items-show')[0];

        if (itemsShow) {
          itemsShow.classList.remove('OwO-items-show');
        }

        this.container.getElementsByClassName('OwO-items')[index].classList.add('OwO-items-show'); //切换选项卡的选中状态

        var packageActive = this.container.getElementsByClassName('OwO-package-active')[0];

        if (packageActive) {
          packageActive.classList.remove('OwO-package-active');
        }

        this.packagesEle.getElementsByTagName('li')[index].classList.add('OwO-package-active'); //懒加载该区域类的图片

        try {
          $("img").lazyload({
            effect: "fadeIn"
          });
        } catch (e) {
          if (this.container.classList.contains("OwO-open")) {
            var a = this.container.querySelectorAll(".OwO-items.OwO-items-show>li img");
            [].forEach.call(a, function (a) {
              var b = a.dataset.original;
              b && (a.src = b, a.removeAttribute("data-original"));
            });
          }
        }
      }
    }]);

    return OwO;
  }();

  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = OwO;
  } else {
    window.OwO = OwO;
  }
})();
